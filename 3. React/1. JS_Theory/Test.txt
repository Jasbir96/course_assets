1) https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/es6/explore-differences-between-the-var-and-let-keywords
2) https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/es6/write-arrow-functions-with-parameters
3) https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/es6/use-destructuring-assignment-to-assign-variables-from-nested-objects
4) https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/functional-programming/use-the-map-method-to-extract-data-from-an-array
5) https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/functional-programming/use-the-filter-method-to-extract-data-from-an-array
6) https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/functional-programming/use-higher-order-functions-map-filter-or-reduce-to-solve-a-complex-problem  
function Pet(name) {
     this.name = name;
    this.getName = () => this.name;
    }
    const cat = new Pet('Fluffy');
    console.log(cat.getName()); // What is logged?
    const { getName } = cat;
    console.log(getName());     // What is logged?
    Answer: Fluffy Fluffy
8)  const object = {
    message: 'Hello, World!',
    logMessage() {
    console.log(this.message); // What is logged?
    }
    };
setTimeout(object.logMessage, 1000);
Answer: Undefined
9)  How can you call logMessage function so that it logs "Hello, World!"?
    const object = {
    message: 'Hello, World!'
    };
    function logMessage() {
    console.log(this.message); // "Hello, World!"
    }
Answer: 
const boundLogMessage = logMessage.bind(object);
boundLogMessage(); //It is one of the ways(can also use call apply)
10) 
    const object = {
    who: 'World',

    greet() {
    return `Hello, ${this.who}!`;
    },

    farewell: () => {
        return `Goodbye, ${this.who}!`;
    }
};

console.log(object.greet());    // What is logged?
console.log(object.farewell());
Answer:
'Hello, World!' and 'Goodbye, undefined!'
-------------advice-------------------
Because the function invocation has the biggest impact on this... ask yourself 

How is the*`function invoked*?

For an arrow function ask yourself:

What is this inside the outer function where the arrow function is defined?

This mindset is correct when dealing with this and will save you from the headache.


deep polyFill
let person = {
    firstName: 'John',
    lastName: 'Doe',
    address: {
        street: 'North 1st street',
        city: 'San Jose',
        state: 'CA',
        country: 'USA'
    },
    movies: ["Die hard", "First Avenger"]
};
let superClone = (object) => {
    let cloning = {};
    // [fn,lastName,address]
    Object.keys(object).map((prop) => {
        if (Array.isArray(object[prop])) {
            // copy array 
            // cloning[prop]= object[prop]
            // let newArr = [];
            // for (let i = 0; i < object[prop].length; i++) {
            //     newArr.push(object[prop][i]);
            // }
            // cloning[prop]=newArr;
            cloning[prop]=[...object[prop]];
            
        } else if (typeof object[prop] === "object") {
            cloning[prop] = superClone(object[prop]);
        } else cloning[prop] = object[prop];
    });

    return cloning;
};
let topLevelObject = superClone(person);
person.address.street = "12";
person.lastName = "Rogers";
topLevelObject.firstName = "Steve";
console.log("person", person);
console.log("top level ", topLevelObject);

